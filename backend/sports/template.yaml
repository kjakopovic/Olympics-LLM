AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stack for managing sports achievements lambdas

Parameters:
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret

  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  # API Gateway
  SportServiceApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1-sports
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # DynamoDB Table definition
  SportsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sport_achievements
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Functions

  AddSportsAchievementsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        AddSportsAchievementsEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: POST
            ApiId: !Ref SportServiceApi

  DeleteSportsAchievementsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        DeleteSportsAchievementsEndpoint:
          Type: HttpApi
          Properties:
            Path: /{sports_id}
            Method: DELETE
            ApiId: !Ref SportServiceApi

  UpdateSportsAchievementsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        UpdateSportsAchievementsEndpoint:
          Type: HttpApi
          Properties:
            Path: /{sports_id}
            Method: PUT
            ApiId: !Ref SportServiceApi

  GetAllSportsAchievementsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetAllSportsAchievementsEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref SportServiceApi

  GetSportsAchievementByIdFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetSportsAchievementByIdEndpoint:
          Type: HttpApi
          Properties:
            Path: /{sports_id}
            Method: GET
            ApiId: !Ref SportServiceApi

Outputs:
  SportsTableArn:
    Description: "Sports table ARN"
    Value: !GetAtt SportsTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SportsTableArn"

  SportsTableName:
    Description: "Sports table NAME"
    Value: !Ref SportsTable
    Export:
      Name: !Sub "${AWS::StackName}-SportsTableName"

  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${SportServiceApi}.execute-api.${AWS::Region}.amazonaws.com/v1-sports"
    Export:
      Name: SportServiceApiUrl
