AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stack for managing news lambdas

Parameters:
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret

  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  # S3 buckets
  NewsImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedOrigins:
              - "*"

  # API Gateway
  NewsServiceApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1-news
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # DynamoDB Table definition
  NewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: news
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Functions
  CreateNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        CreateNewsEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: POST
            ApiId: !Ref NewsServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Create new news for our site
        description: Create new news for our site, authorized only for admins
        operationId: createNews
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    id:
                      type: string
                    picture_urls:
                      type: array
                      urls:
                        type: string
          400:
            description: Validation error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized, expired or invalid token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          403:
            description: If your permissions are not strong enough you wont be able to use the endpoint
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  picture_count:
                    type: integer
                  tags:
                      type: array
                      tagsinlist:
                        type: string
                required:
                  - title
                  - description

  DeleteNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        DeleteNewsEndpoint:
          Type: HttpApi
          Properties:
            Path: /{news_id}
            Method: DELETE
            ApiId: !Ref NewsServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Delete news from our site
        description: Delete news from our site with pictures also, authorized only for admins
        operationId: deleteNews
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          400:
            description: Validation error or invalid news id
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized, expired or invalid token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          403:
            description: If your permissions are not strong enough you wont be able to use the endpoint
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          404:
            description: News with that id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "guid-type-of-id"

  UpdateNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        UpdateNewsEndpoint:
          Type: HttpApi
          Properties:
            Path: /{news_id}
            Method: PUT
            ApiId: !Ref NewsServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Update news from our site
        description: Update news from our site with pictures also supported to be updated, authorized only for admins
        operationId: updateNews
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    urls:
                      type: array
                      urlsitems:
                        type: string
          400:
            description: Validation error or invalid news id
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized, expired or invalid token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          403:
            description: If your permissions are not strong enough you wont be able to use the endpoint
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          404:
            description: News with that id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "guid-type-of-id"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  description:
                    type: string
                  new_pictures_count:
                    type: integer
                  pictures_to_delete:
                      type: array
                      idsinlist:
                        type: string
                  tags:
                      type: array
                      tagsinlist:
                        type: string

  GetAllNewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          USERS_TABLE_NAME: !ImportValue users-UsersTableName
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetAllNewsEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref NewsServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Get all news paginated
        description: Get all news paginated, if user is logged in he will have tags related news
        operationId: getAllNews
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    total_records_found:
                      type: integer
                    item_count:
                      type: integer
                    items:
                      type: array
                      news:
                        type: object
                        properties:
                          id:
                            type: string
                          title:
                            type: string
                          description:
                            type: string
                          published_at:
                            type: string
                          tags:
                            type: array
                            tagsinlist:
                              type: string
                          pictures_url:
                            type: array
                            picturesinlist:
                              type: object
                              properties:
                                key:
                                  type: string
                                url:
                                  type: string
          400:
            description: Validation error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized, expired or invalid token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
          - in: query
            name: page
            required: false
            schema:
              type: integer
              example: 1
          - in: query
            name: limit
            required: false
            schema:
              type: integer
              example: 50

  GetNewsByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref NewsTable
          NEWS_PICTURES_BUCKET: !Ref NewsImagesBucket
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        GetNewsByIdEndpoint:
          Type: HttpApi
          Properties:
            Path: /{news_id}
            Method: GET
            ApiId: !Ref NewsServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Get news info by id
        description: Get news info by id
        operationId: getNewsById
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    info:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        description:
                          type: string
                        published_at:
                          type: string
                        tags:
                          type: array
                          tagsinlist:
                            type: string
                        pictures_url:
                          type: array
                          picturesinlist:
                            type: object
                            properties:
                              key:
                                type: string
                              url:
                                type: string
          400:
            description: Validation error or invalid news id
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized, expired or invalid token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          404:
            description: News with that id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: "guid-type-of-id"

Outputs:
  NewsTableArn:
    Description: "News table ARN"
    Value: !GetAtt NewsTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NewsTableArn"

  NewsTableName:
    Description: "News table NAME"
    Value: !Ref NewsTable
    Export:
      Name: !Sub "${AWS::StackName}-NewsTableName"

  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${NewsServiceApi}.execute-api.${AWS::Region}.amazonaws.com/v1-news"
    Export:
      Name: NewsServiceApiUrl
