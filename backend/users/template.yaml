AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  stack for managing user lambdas

Parameters:
  JwtSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the JWT secret
    Default: python-lambda-app/prod/jwt-secret

  ThirdPartyClientsSecretName:
    Type: String
    Description: Name of the secret in Secrets Manager that contains the third party clients secrets
    Default: python-lambda-app/prod/third-party-secrets

  SecretsRegionName:
    Type: String
    Description: Region name where the secrets are stored
    Default: eu-central-1

# Global Settings
Globals:
  Function:
    Timeout: 60
    MemorySize: 512

Resources:
  # API Gateway
  UserServiceApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1-users
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"

  # DynamoDB Table definition
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Functions
  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "s3:*"
              Resource: "*"
      Events:
        RegisterUserEndpoint:
          Type: HttpApi
          Properties:
            Path: /register
            Method: POST
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Register user into our application
        description: Register user into our application, they will be registered with the role user automatically
        operationId: registerUser
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          400:
            description: Validation error or already existing user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  first_name:
                    type: string
                  last_name:
                    type: string
                required:
                  - email
                  - password
                  - first_name
                  - last_name

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        LoginUserEndpoint:
          Type: HttpApi
          Properties:
            Path: /login
            Method: POST
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Login user into our application
        description: Login user into our application
        operationId: loginUser
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    token:
                      type: string
                    refresh_token:
                      type: string
          400:
            description: Validation error or wrong email or password
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                required:
                  - email
                  - password

  ThirdPartyLoginRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          THIRD_PARTY_CLIENTS_SECRET_NAME: !Ref ThirdPartyClientsSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
              Resource: "*"
      Events:
        ThirdPartyLoginRequestEndpoint:
          Type: HttpApi
          Properties:
            Path: /login/third-party
            Method: GET
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Request login via third party service
        description: Request login via third party service, currently supported google, facebook and github
        operationId: thirdPartyLoginRequest
        responses:
          302:
            description: Redirect to third party login page
          400:
            description: Wrong service type entered
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
          - in: query
            name: type_of_service
            required: true
            schema:
              type: string
              enum:
                - google
                - facebook
                - github
              example: google

  ThirdPartyLoginValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          THIRD_PARTY_CLIENTS_SECRET_NAME: !Ref ThirdPartyClientsSecretName
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
                - "s3:*"
              Resource: "*"
      Events:
        ThirdPartyLoginValidateEndpoint:
          Type: HttpApi
          Properties:
            Path: /login/third-party/confirm
            Method: GET
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Callback endpoint for third party service login
        description: You are not calling this endpoint directly, it is called by third party service
        operationId: thirdPartyLoginConfirm
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    token:
                      type: string
                    refresh_token:
                      type: string
          400:
            description: Wrong queries from third party page entered
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        parameters:
          - in: query
            name: code
            required: true
            schema:
              type: string
          - in: query
            name: state
            required: true
            schema:
              type: string

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
                - "s3:*"
              Resource: "*"
      Events:
        DeleteUserEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: DELETE
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Hard delete user from our application
        description: Hard delete user from our application
        operationId: deleteUser
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          400:
            description: User cant be deleted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string

  ChangePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
                - "s3:*"
              Resource: "*"
      Events:
        ChangePasswordEndpoint:
          Type: HttpApi
          Properties:
            Path: /password/change
            Method: POST
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Change password for user that is logged in
        description: Change password for user that is logged in
        operationId: changePassword
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    token:
                      type: string
                    refresh_token:
                      type: string
          400:
            description: Validation error, missing user or incorrect password
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  new_password:
                    type: string
                required:
                  - email
                  - password
                  - new_password

  GetUserInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
                - "s3:*"
              Resource: "*"
      Events:
        GetUserInfoEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Get user profile info
        description: Get user profile info
        operationId: getUserInfo
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    info:
                      type: object
                      properties:
                        email:
                          type: string
                        legal_name:
                          type: string
                        phone_number:
                          type: string
                        tags:
                          type: array
                          items:
                            type: string
          400:
            description: Invalid user credentials inside of token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string

  UpdateUserInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda_handler.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          JWT_SECRET_NAME: !Ref JwtSecretName
          SECRETS_REGION_NAME: !Ref SecretsRegionName
      Architectures:
        - x86_64
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
                - "secretsmanager:GetSecretValue"
                - "s3:*"
              Resource: "*"
      Events:
        UpdateUserInfoEndpoint:
          Type: HttpApi
          Properties:
            Path: /
            Method: PUT
            ApiId: !Ref UserServiceApi
    Metadata:
      BuildMethod: makefile
      Swagger:
        summary: Update users information
        description: Update users information
        operationId: updateUserInfo
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          400:
            description: Validation error, wrong credentials in token or empty request body
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          401:
            description: Unauthorized user
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
          500:
            description: Unhandled exception, call developers
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                  last_name:
                    type: string
                  phone_number:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string

Outputs:
  UsersTableArn:
    Description: "Users table ARN"
    Value: !GetAtt UsersTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableArn"

  UsersTableName:
    Description: "Users table NAME"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTableName"

  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${UserServiceApi}.execute-api.${AWS::Region}.amazonaws.com/v1-users"
    Export:
      Name: UserServiceApiUrl
